---
import { getCollection } from 'astro:content'
import { twMerge } from 'tailwind-merge'

const blocks = await getCollection('blocks')
const currentPath = Astro.url.pathname

const links = blocks
    .map((page) => ({
        name: page.data.title,
        href: page.slug,
        active: currentPath.includes(page.slug),
        priority: page.data.priorityOrder || 0,
    }))
    .sort((a, b) => a.priority - b.priority)
---

<script>
    document.addEventListener('astro:page-load', () => {
        const blocksNav = document.querySelector('#blocks-nav') as HTMLElement

        let timeoutId
        const linksParent = document.querySelector('#linksParent')
        const currentScroll = sessionStorage.getItem('blocksScrollPosition') || '0'
        linksParent!.scrollLeft = JSON.parse(currentScroll)

        const handleScroll = (event) => {
            if (timeoutId !== null) {
                clearTimeout(timeoutId)
            }

            timeoutId = setTimeout(() => {
                sessionStorage.setItem('blocksScrollPosition', event.target.scrollLeft)
            }, 100)
        }

        linksParent?.addEventListener('scroll', (event) => {
            handleScroll(event)
        })

        window.addEventListener('scroll', () => {
            const scrollY = window.scrollY

            if (scrollY > blocksNav.getBoundingClientRect().top) {
                blocksNav.classList.remove('border-transparent')
                blocksNav.classList.add('border-white/50', 'bg-white/75', 'backdrop-blur-xl', 'dark:bg-gray-950/75', 'dark:border-white/5')
                blocksNav.classList.replace('outline-transparent', 'outline-gray-950/10')
            } else {
                blocksNav.classList.remove('border-white/50', 'bg-white/75', 'backdrop-blur-xl', 'dark:bg-gray-950/75', 'dark:border-white/5')
                blocksNav.classList.add('border-transparent')
                blocksNav.classList.replace('outline-gray-950/10', 'outline-transparent')
            }
        })
    })
</script>

<div class="absolute inset-x-0 z-20 mx-auto -mt-[3px] h-12 border-y border-gray-950/[0.07] dark:border-white/5"></div>
<div id="blocks-nav" class="rounded-card sticky top-1 z-30 mx-1 max-w-[calc(80rem-6px)] border border-transparent px-3.5 outline outline-1 outline-transparent duration-300 lg:top-2 lg:mx-auto lg:px-4 dark:outline-transparent">
    <div class="[--body-text-color:var(--color-gray-600)] dark:[--body-text-color:var(--color-gray-400)]">
        <nav class="relative">
            <div id="linksParent" class="blocksnav-scrollbar flex snap-x snap-mandatory gap-3 overflow-x-scroll">
                {
                    links.map((link) => (
                        <div class="snap-center">
                            <a href={`/blocks/${link.href}`} class={twMerge(`relative block w-max text-nowrap px-3 pb-3 pt-2.5 text-sm transition-colors duration-200 hover:text-title before:absolute before:inset-x-3 before:bottom-0 before:h-0.5 before:rounded-xs ${link.active ? 'text-title before:bg-primary-600 dark:before:bg-primary-400' : 'text-body'}`)}>
                                {link.name}
                            </a>
                        </div>
                    ))
                }
            </div>
        </nav>
    </div>
</div>
